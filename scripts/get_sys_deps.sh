#!/usr/bin/env bash

# Get the parent folder, which is the overlay root
__script_dir="$(dirname "$(dirname "$(realpath "$0")")")"
# Compose the cosmic-base ebuild folder
__cosmic_de_dir="${__script_dir}/cosmic-base"

function log() { echo >&2 "$*"; }
function error() { log "ERROR: $*"; }
function errorExit() {
    local -r rc="$1"
    shift 1
    error "$*"
    exit "$rc"
}
function push_d() { pushd "$*" &>/dev/null || errorExit 5 "could not pushd to $*"; }
function pop_d() { popd &>/dev/null || errorExit 6 "could not popd from $PWD"; }
CLEANUP_DIRS_FILES=()
# shellcheck disable=SC2317
function cleanup() {
    for x in "${CLEANUP_DIRS_FILES[@]}"; do
        # error "would remove: ${x}"
        rm -rf "${x}"
    done
}
trap cleanup EXIT SIGINT SIGTERM

! which git &>/dev/null &&
    errorExit 2 "git was not found in $PATH, you need git installed to run this script"

# This needs to be a tag
GIT_TAG=
if [ $# -ge 1 ]; then
    GIT_TAG="$1"
fi

# Clone the main repo to a temporary folder
__temp_folder=
__temp_folder="$(mktemp -d)"
# shellcheck disable=SC2181
[ $? -ne 0 ] && errorExit 10 "could not create temporary folder for cloning"
CLEANUP_DIRS_FILES+=("${__temp_folder}")

push_d "${__temp_folder}"
git clone https://github.com/pop-os/cosmic-epoch || errorExit 12 "could not clone git repo"

push_d "cosmic-epoch"
if [ -n "${GIT_TAG}" ]; then
    git switch -d "${GIT_TAG}" || errorExit 13 "could not switch to tag ${GIT_TAG}"
fi
git submodule update --init --recursive || errorExit 14 "could not update submodules"

# Generate list of modules for later querying
rg submodule .gitmodules | rg '"[A-Za-z0-9-].*"' -o | sed 's:"::g' | sort -u | while read -r linea; do
    [ ! -d "$linea" ] && continue
    [ ! -e "$linea/Cargo.toml" ] && continue
    push_d "$linea"
    echo -e "\n----------- | $linea"
    cargo tree | rg '[A-Za-z0-9-].*-sys' -o | sort -u |
        rg -v \
            -e '^dirs-sys$' \
            -e '^drm-sys$' | while read -r crate; do
        case "$crate" in
        "dirs-sys" | "drm-sys" | "inotify-sys" | "libbz2-rs-sys" | "linux-raw-sys")
            # these crates are normally raw bindings to the linux APIs
            # they do not bind to a system lib (except for inotify-sys, which uses *libc of course)
            ;;
        "cosmic-settings-sys")
            # these crates are auto?generated by the various components
            ;;
        "bzip2-sys") echo 'app-arch/bzip2:0' ;;
        "clang-sys") echo 'llvm-core/clang' ;;
        "gbm-sys") echo 'media-libs/mesa:0' ;;
        "gettext-sys") echo 'sys-devel/gettext:0' ;;
        "gio-sys" | "glib-sys" | "gobject-sys") echo 'dev-libs/glib:2' ;;
        "gstreamer-sys") echo 'media-libs/gstreamer:1.0' ;;
        "gstreamer-app-sys" | "gstreamer-audio-sys" | "gstreamer-base-sys" | "gstreamer-pbutils-sys" | "gstreamer-tag-sys" | "gstreamer-video-sys")
            echo 'media-libs/gstreamer:1.0'
            echo 'media-libs/gst-plugins-base:1.0'
            echo 'media-libs/gst-plugins-good:1.0'
            echo 'media-libs/gst-plugins-bad:1.0'
            echo 'media-libs/gst-plugins-ugly:1.0'
            echo 'media-libs/gstreamer-editing-services:1.0 (optional - for building video editors)'
            ;;
        "input-sys") echo 'dev-libs/libinput:0/10' ;;
        "libdbus-sys") echo '|| ( sys-apps/dbus:0 sys-apps/dbus-broker:0 )' ;;
        "libdisplay-info-sys") echo 'media-libs/libdisplay-info:0' ;;
        "libflatpak-sys") echo 'sys-apps/flatpak:0' ;;
        "libseat-sys") echo 'sys-auth/seatd:0' ;;
        "libspa-sys" | "pipewire-sys") echo 'media-video/pipewire:0' ;;
        "libudev-sys") echo 'virtual/libudev:0' ;;
        "openssl-sys") echo 'dev-libs/openssl:0/3' ;;
        "pam-sys") echo 'sys-libs/pam:0' ;;
        "renderdoc-sys") echo 'media-gfx/renderdoc:0 (optional - only contains FFI symbols)' ;;
        "wayland-sys") echo 'dev-libs/wayland:0' ;;
        "zstd-sys") echo 'app-arch/zstd:0' ;;
        "liblzma-sys") echo 'app-arch/xz-utils:0' ;;
        "libpulse-sys") echo 'media-libs/libpulse:0' ;;
        "pixman-sys") echo 'x11-libs/pixman:0' ;;
        *)
            echo "###################################### unsupported crate: ${crate}"
            exit 254
            ;;
        esac
    done | sort -u
    pop_d
done # | sort -u # readd sort -u to generate one list for the eclass

pop_d # cosmic-epoch

pop_d # __temp_folder

exit 0
