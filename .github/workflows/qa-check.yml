name: QA Check

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Weekly runs on Sundays at 06:00 UTC
    - cron: "0 6 * * 0"
  workflow_dispatch:

jobs:
  qa-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Gentoo in Docker
        run: |
          # Create a custom Dockerfile for our QA environment
          cat > Dockerfile << 'EOF'
          FROM gentoo/stage3:latest

          # Update Portage and install required tools
          RUN emerge-webrsync
          RUN emerge --update --quiet @system
          RUN emerge --quiet pkgdev pkgcheck

          # Ensure repository directories exist
          RUN mkdir -p /var/db/repos/cosmic-overlay

          # Debug: Check where the Gentoo repository is located and what configs exist
          RUN find /var/db/repos -name "profiles" -type d 2>/dev/null || true
          RUN find /usr -name "portage" -type d 2>/dev/null || true
          RUN ls -la /var/db/repos/ || true
          RUN ls -la /etc/portage/repos.conf/ || echo "No repos.conf directory exists"
          RUN cat /etc/portage/repos.conf/*.conf 2>/dev/null || echo "No repo config files found"

          # Ensure Gentoo repository is in the expected location
          RUN ls -la /var/db/repos/gentoo/ || echo "/var/db/repos/gentoo does not exist"
          RUN ls -la /usr/portage/ || echo "/usr/portage does not exist"
          RUN if [ -d /usr/portage ] && [ ! -d /var/db/repos/gentoo/profiles ]; then ln -sf /usr/portage /var/db/repos/gentoo; fi
          RUN if [ ! -d /var/db/repos/gentoo ]; then mkdir -p /var/db/repos/gentoo; fi
          RUN ls -la /var/db/repos/gentoo/ || echo "Still no /var/db/repos/gentoo after setup"

          # Set up repository configurations
          RUN mkdir -p /etc/portage/repos.conf

          # Configure basic Gentoo repository (this should work regardless of existing config)
          RUN echo '[DEFAULT]' > /etc/portage/repos.conf/gentoo.conf
          RUN echo 'main-repo = gentoo' >> /etc/portage/repos.conf/gentoo.conf
          RUN echo '' >> /etc/portage/repos.conf/gentoo.conf
          RUN echo '[gentoo]' >> /etc/portage/repos.conf/gentoo.conf
          RUN echo 'location = /var/db/repos/gentoo' >> /etc/portage/repos.conf/gentoo.conf

          # Configure overlay
          RUN echo '[cosmic-overlay]' > /etc/portage/repos.conf/cosmic-overlay.conf
          RUN echo 'location = /var/db/repos/cosmic-overlay' >> /etc/portage/repos.conf/cosmic-overlay.conf
          RUN echo 'sync-type = git' >> /etc/portage/repos.conf/cosmic-overlay.conf
          RUN echo 'masters = gentoo' >> /etc/portage/repos.conf/cosmic-overlay.conf
          RUN echo 'auto-sync = no' >> /etc/portage/repos.conf/cosmic-overlay.conf

          WORKDIR /var/db/repos/cosmic-overlay
          EOF

          # Build the container
          docker build -t cosmic-qa .

      - name: Run QA checks in container
        run: |
          # Copy overlay to container and run checks
          docker run --rm \
            -v "$PWD":/var/db/repos/cosmic-overlay \
            -w /var/db/repos/cosmic-overlay \
            cosmic-qa \
            bash -c '
              set -e
              
              # Create reports directory
              mkdir -p reports
              
              echo "Starting QA checks..."
              echo "Overlay location: $(pwd)"
              echo "Available categories:"
              ls -la
              
              # Run pkgcheck scan using centralized configuration and capture output
              echo "Running pkgcheck scan..." | tee reports/pkgcheck-scan.txt
              if pkgcheck scan --config scripts/pkgcheck.conf --reporter=StrReporter >> reports/pkgcheck-scan.txt 2>&1; then
                echo "‚úÖ pkgcheck scan passed" | tee -a reports/pkgcheck-scan.txt
                SCAN_EXIT=0
              else
                echo "‚ùå pkgcheck scan found issues" | tee -a reports/pkgcheck-scan.txt
                SCAN_EXIT=1
              fi
              
              # Generate JSON report for processing
              echo "Generating JSON report..." >> reports/pkgcheck-scan.txt
              pkgcheck scan --config scripts/pkgcheck.conf --reporter=JsonReporter > reports/pkgcheck-results.json 2>/dev/null || true
              
              # Check individual packages with pkgdev
              echo "Running package checks..." > reports/package-checks.txt
              for category in cosmic-base acct-group acct-user dev-util virtual x11-themes; do
                if [ -d "$category" ]; then
                  echo "=== Checking category: $category ===" >> reports/package-checks.txt
                  for package in "$category"/*; do
                    if [ -d "$package" ]; then
                      echo "Checking: $package" >> reports/package-checks.txt
                      cd "$package"
                      if ls *.ebuild >/dev/null 2>&1; then
                        # Update manifests using pkgdev
                        pkgdev manifest 2>&1 | tee -a ../../reports/package-checks.txt || true
                      fi
                      cd - > /dev/null
                    fi
                  done
                  echo "" >> reports/package-checks.txt
                fi
              done
              
              # Generate summary report
              echo "Generating reports..."
              python3 ./scripts/generate-qa-report.py
              
              echo "QA checks completed!"
              exit $SCAN_EXIT
            '

      - name: Upload QA reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: qa-reports-${{ github.sha }}
          path: reports/
          retention-days: 30

      - name: Comment PR with QA results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'reports/summary.md';

            try {
              if (fs.existsSync(path)) {
                const summary = fs.readFileSync(path, 'utf8');
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## üîç QA Check Results\n\n${summary}\n\nüìÅ Full reports available in [workflow artifacts](${context.payload.repository.html_url}/actions/runs/${context.runId}).`
                });
              } else {
                console.log('Summary file not found, skipping PR comment');
              }
            } catch (error) {
              console.log('Error posting PR comment:', error.message);
            }

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üö® QA Check Failed - ${new Date().toISOString().split('T')[0]}`,
                body: `QA checks failed for commit \`${context.sha.substring(0, 7)}\`.\n\n**Details:**\n- Workflow: ${context.workflow}\n- Run: ${context.runNumber}\n- Branch: ${context.ref}\n\nPlease check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.`,
                labels: ['qa-failure', 'automated', 'bug']
              });
            } catch (error) {
              console.log('Error creating issue:', error.message);
            }
